{"version":3,"file":"TasksPageWithBulkOps-9964ba8c.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/calendar-days.js","../../../node_modules/lucide-react/dist/esm/icons/undo-2.js","../../../src/pages/TasksPageWithBulkOps.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CalendarDays = createLucideIcon(\"CalendarDays\", [\n  [\"path\", { d: \"M8 2v4\", key: \"1cmpym\" }],\n  [\"path\", { d: \"M16 2v4\", key: \"4m81vk\" }],\n  [\"rect\", { width: \"18\", height: \"18\", x: \"3\", y: \"4\", rx: \"2\", key: \"1hopcy\" }],\n  [\"path\", { d: \"M3 10h18\", key: \"8toen8\" }],\n  [\"path\", { d: \"M8 14h.01\", key: \"6423bh\" }],\n  [\"path\", { d: \"M12 14h.01\", key: \"1etili\" }],\n  [\"path\", { d: \"M16 14h.01\", key: \"1gbofw\" }],\n  [\"path\", { d: \"M8 18h.01\", key: \"lrp35t\" }],\n  [\"path\", { d: \"M12 18h.01\", key: \"mhygvu\" }],\n  [\"path\", { d: \"M16 18h.01\", key: \"kzsmim\" }]\n]);\n\nexport { CalendarDays as default };\n//# sourceMappingURL=calendar-days.js.map\n","/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Undo2 = createLucideIcon(\"Undo2\", [\n  [\"path\", { d: \"M9 14 4 9l5-5\", key: \"102s5s\" }],\n  [\"path\", { d: \"M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11\", key: \"llx8ln\" }]\n]);\n\nexport { Undo2 as default };\n//# sourceMappingURL=undo-2.js.map\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAppContext } from '../context/AppContextSupabase';\nimport { Task, TaskSortMode, WhatNowCriteria } from '../types';\nimport { TaskDisplay } from '../components/TaskDisplay';\nimport TaskFormWithDependencies from '../components/tasks/TaskFormWithDependencies';\nimport AITaskBreakdown from '../components/tasks/AITaskBreakdown';\nimport ConvertToProject from '../components/tasks/ConvertToProject';\nimport Modal from '../components/common/Modal';\nimport Button from '../components/common/Button';\nimport Card from '../components/common/Card';\nimport Empty from '../components/common/Empty';\nimport { QuickCapture } from '../components/tasks/QuickCapture';\nimport { \n  Plus, Filter, X, Undo2, Archive, \n  AlertTriangle, CalendarDays, Calendar, Layers, \n  Trash2, CheckCircle2, Folder, FileArchive,\n  ArrowUpDown, Clock, Star, Hash, FolderOpen, Tag,\n  Zap, Brain, Timer, Battery\n} from 'lucide-react';\nimport { formatDate, getOverdueTasks, getTasksDueToday, getTasksDueThisWeek } from '../utils/helpers';\nimport { DeletedTask, getDeletedTasks, restoreDeletedTask, permanentlyDeleteTask } from '../utils/localStorage';\nimport { sortTasks as smartSortTasks, SortMode, EnergyLevel, getFilteredCounts, getSortModeInfo } from '../utils/taskPrioritization';\nimport { useConfirmDialog } from '../hooks/useConfirmDialog';\n\ninterface BulkTaskCardProps {\n  task: Task;\n  isSelected: boolean;\n  onSelectChange: (selected: boolean) => void;\n  onEdit: (task: Task) => void;\n  onDelete: (taskId: string) => void;\n  onBreakdown?: (task: Task) => void;\n  onConvertToProject?: (task: Task) => void;\n}\n\nconst BulkTaskCard: React.FC<BulkTaskCardProps> = ({ \n  task, \n  isSelected, \n  onSelectChange,\n  onEdit,\n  onDelete,\n  onBreakdown,\n  onConvertToProject\n}) => {\n  const { updateTask } = useAppContext();\n  \n  return (\n    <div className=\"relative\">\n      {/* Selection checkbox for bulk operations */}\n      <div className=\"absolute left-2 top-4 z-10\">\n        <input\n          type=\"checkbox\"\n          checked={isSelected}\n          onChange={(e) => onSelectChange(e.target.checked)}\n          className=\"h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500\"\n        />\n      </div>\n      \n      {/* Task display with padding for checkbox */}\n      <div className={isSelected ? 'ml-8' : 'ml-8'}>\n        <TaskDisplay\n          task={task}\n          onToggle={() => updateTask({ ...task, completed: !task.completed })}\n          onEdit={onEdit}\n          onDelete={onDelete}\n          onBreakdown={onBreakdown}\n          onConvertToProject={onConvertToProject}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst TasksPageWithBulkOps: React.FC = () => {\n  const location = useLocation();\n  const { confirm, ConfirmDialogComponent } = useConfirmDialog();\n  const { \n    tasks, \n    projects, \n    categories, \n    deleteTask, \n    undoDelete, \n    hasRecentlyDeleted, \n    archiveCompletedTasks,\n    bulkDeleteTasks,\n    bulkCompleteTasks,\n    bulkMoveTasks,\n    bulkArchiveTasks,\n    bulkAddTasks,\n    bulkConvertToSubtasks,\n    bulkAssignCategories\n  } = useAppContext();\n  \n  // Get initial tab from URL query params\n  const searchParams = new URLSearchParams(location.search);\n  const tabParam = searchParams.get('tab') as 'today' | 'tomorrow' | 'week' | 'overdue' | 'all' | null;\n  const categoryIdParam = searchParams.get('categoryId');\n  const initialTab = tabParam || 'all';\n  \n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n  const [showUndoNotification, setShowUndoNotification] = useState(false);\n  const [showArchiveConfirm, setShowArchiveConfirm] = useState(false);\n  const [showBulkActions, setShowBulkActions] = useState(false);\n  const [selectedTasks, setSelectedTasks] = useState<Set<string>>(new Set());\n  const [showBulkMoveModal, setShowBulkMoveModal] = useState(false);\n  const [selectedProjectForMove, setSelectedProjectForMove] = useState<string | null>(null);\n  const [breakdownTask, setBreakdownTask] = useState<Task | null>(null);\n  const [convertToProjectTask, setConvertToProjectTask] = useState<Task | null>(null);\n  const [showConvertToSubtasksModal, setShowConvertToSubtasksModal] = useState(false);\n  const [selectedParentTaskId, setSelectedParentTaskId] = useState<string | null>(null);\n  const [, setDeletedTasks] = useState<DeletedTask[]>([]);\n  const [showBulkCategoryModal, setShowBulkCategoryModal] = useState(false);\n  const [selectedCategoryIdsForBulk, setSelectedCategoryIdsForBulk] = useState<string[]>([]);\n  const [categoryAssignMode, setCategoryAssignMode] = useState<'add' | 'replace'>('add');\n  \n  // Filter state\n  const [showCompleted, setShowCompleted] = useState(false);\n  const [showArchived, setShowArchived] = useState(false);\n  const [filterProjectId, setFilterProjectId] = useState<string | null>(null);\n  const [filterCategoryId, setFilterCategoryId] = useState<string | null>(categoryIdParam);\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n  \n  // View state\n  const [activeTab, setActiveTab] = useState<'today' | 'tomorrow' | 'week' | 'overdue' | 'all' | 'deleted'>(initialTab);\n  \n  // Sort state\n  type SortOption = 'dueDate' | 'priority' | 'createdAt' | 'title' | 'estimatedMinutes' | 'project';\n  type SortDirection = 'asc' | 'desc';\n  const [sortBy, setSortBy] = useState<SortOption>('dueDate');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');\n  const [showSortMenu, setShowSortMenu] = useState(false);\n  const sortMenuRef = useRef<HTMLDivElement>(null);\n  \n  // Smart sorting state\n  const [smartSortMode, setSmartSortMode] = useState<SortMode>('smart');\n  const [currentEnergy, setCurrentEnergy] = useState<EnergyLevel>('medium');\n  const [showSmartSort, setShowSmartSort] = useState(false);\n  \n  // Show undo notification when a task is deleted\n  useEffect(() => {\n    if (hasRecentlyDeleted) {\n      setShowUndoNotification(true);\n      const timer = setTimeout(() => {\n        setShowUndoNotification(false);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [hasRecentlyDeleted]);\n  \n  // Load deleted tasks when tab changes\n  useEffect(() => {\n    if (activeTab === 'deleted') {\n      loadDeletedTasks();\n    }\n  }, [activeTab]);\n  \n  // Close sort menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (sortMenuRef.current && !sortMenuRef.current.contains(event.target as Node)) {\n        setShowSortMenu(false);\n      }\n    };\n    \n    if (showSortMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n    \n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showSortMenu]);\n  \n  const loadDeletedTasks = () => {\n    const deleted = getDeletedTasks();\n    setDeletedTasks(deleted.sort((a, b) => \n      new Date(b.deletedAt).getTime() - new Date(a.deletedAt).getTime()\n    ));\n  };\n  \n  // const handleRestoreTask = (taskId: string) => {\n  //   const restoredTask = restoreDeletedTask(taskId);\n  //   if (restoredTask) {\n  //     loadDeletedTasks();\n  //     // The context will automatically update with the restored task\n  //   }\n  // };\n  \n  // const handlePermanentlyDeleteTask = (taskId: string) => {\n  //   permanentlyDeleteTask(taskId);\n  //   loadDeletedTasks();\n  // };\n  \n  const handleOpenModal = (task?: Task) => {\n    if (task) {\n      setEditingTask(task);\n    } else {\n      setEditingTask(null);\n    }\n    setIsModalOpen(true);\n  };\n  \n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingTask(null);\n  };\n  \n  const handleDeleteTask = (taskId: string) => {\n    deleteTask(taskId);\n  };\n  \n  const handleUndo = () => {\n    undoDelete();\n    setShowUndoNotification(false);\n  };\n  \n  const toggleFilter = () => {\n    setIsFilterOpen(!isFilterOpen);\n  };\n  \n  const clearFilters = () => {\n    setShowCompleted(false);\n    setShowArchived(false);\n    setFilterProjectId(null);\n    setFilterCategoryId(null);\n  };\n\n  const handleArchiveConfirmOpen = () => {\n    const completedTasks = tasks.filter(task => task.completed && !task.archived);\n    if (completedTasks.length > 0) {\n      setShowArchiveConfirm(true);\n    }\n  };\n\n  const handleArchiveConfirmClose = () => {\n    setShowArchiveConfirm(false);\n  };\n\n  const handleArchiveCompleted = async () => {\n    const completedTasks = tasks.filter(task => task.completed && !task.archived);\n    \n    const confirmed = await confirm({\n      title: 'Archive Completed Tasks',\n      message: `Archive ${completedTasks.length} completed task${completedTasks.length > 1 ? 's' : ''}?\\n\\nArchived tasks will be hidden from your main views but can be accessed later.`,\n      confirmText: 'Archive',\n      cancelText: 'Cancel',\n      variant: 'info',\n      confirmButtonVariant: 'primary'\n    });\n    \n    if (confirmed) {\n      archiveCompletedTasks();\n    }\n    setShowArchiveConfirm(false);\n  };\n  \n  const handleBreakdown = (task: Task) => {\n    setBreakdownTask(task);\n  };\n  \n  const handleBreakdownAccept = async (subtasks: Partial<Task>[]) => {\n    if (breakdownTask) {\n\n      // Prepare all subtasks with parentTaskId and other inherited fields\n      const preparedSubtasks = subtasks.map((subtask) => ({\n        ...subtask,\n        parentTaskId: breakdownTask.id,\n        projectId: breakdownTask.projectId,\n        categoryIds: breakdownTask.categoryIds || [],\n        dueDate: subtask.dueDate || breakdownTask.dueDate || null,\n        priority: subtask.priority || breakdownTask.priority || 'medium',\n        energyLevel: subtask.energyLevel || breakdownTask.energyLevel,\n        estimatedMinutes: subtask.estimatedMinutes,\n        tags: subtask.tags || [],\n      }));\n\n      bulkAddTasks(preparedSubtasks);\n\n      setBreakdownTask(null);\n    }\n  };\n  \n  const handleBreakdownClose = () => {\n    setBreakdownTask(null);\n  };\n  \n  const handleConvertToProject = (task: Task) => {\n    setConvertToProjectTask(task);\n  };\n  \n  const handleConvertToProjectConfirm = async (projectData: any, options: any) => {\n    if (!convertToProjectTask) return;\n    \n    try {\n      // Create the new project\n      const newProject = await addProject(projectData);\n      \n      // Get subtasks if they exist\n      const subtasks = tasks.filter(t => t.parentTaskId === convertToProjectTask.id);\n      \n      // Update the original task to be part of the project if requested\n      if (options.moveToProject) {\n        await updateTask({\n          ...convertToProjectTask,\n          projectId: newProject.id,\n          parentTaskId: null // Remove parent relationship if it exists\n        });\n      }\n      \n      // Include subtasks if requested\n      if (options.includeSubtasks && subtasks.length > 0) {\n        for (const subtask of subtasks) {\n          await updateTask({\n            ...subtask,\n            projectId: newProject.id,\n            parentTaskId: options.moveToProject ? convertToProjectTask.id : null\n          });\n        }\n      }\n      \n      // Create project phases if requested\n      if (options.createPhases) {\n        const phases = ['Planning', 'Execution', 'Review'];\n        for (const [index, phaseName] of phases.entries()) {\n          await addTask({\n            title: `${phaseName} Phase`,\n            description: `${phaseName} phase for ${newProject.name}`,\n            projectId: newProject.id,\n            phase: phaseName,\n            phaseOrder: index,\n            tags: [phaseName.toLowerCase()],\n            completed: false,\n            archived: false,\n            categoryIds: convertToProjectTask.categoryIds || [],\n            dueDate: null,\n            startDate: null,\n            parentTaskId: null,\n            priority: 'medium',\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          });\n        }\n      }\n      \n      // Delete original task if requested and not moved to project\n      if (options.deleteOriginalTask && !options.moveToProject) {\n        await deleteTask(convertToProjectTask.id);\n      }\n      \n      setConvertToProjectTask(null);\n    } catch (error) {\n      console.error('Failed to convert task to project:', error);\n    }\n  };\n  \n  const handleConvertToProjectCancel = () => {\n    setConvertToProjectTask(null);\n  };\n  \n  // Bulk operations\n  const toggleTaskSelection = (taskId: string) => {\n    const newSelection = new Set(selectedTasks);\n    if (newSelection.has(taskId)) {\n      newSelection.delete(taskId);\n    } else {\n      newSelection.add(taskId);\n    }\n    setSelectedTasks(newSelection);\n  };\n  \n  const selectAllVisibleTasks = () => {\n    const visibleTaskIds = new Set(getActiveTaskList().map(task => task.id));\n    setSelectedTasks(visibleTaskIds);\n  };\n  \n  const deselectAllTasks = () => {\n    setSelectedTasks(new Set());\n  };\n  \n  const handleBulkDelete = async () => {\n    if (selectedTasks.size === 0) return;\n    \n    const confirmed = await confirm({\n      title: 'Delete Tasks',\n      message: `Are you sure you want to delete ${selectedTasks.size} task${selectedTasks.size > 1 ? 's' : ''}?\\n\\nThis action cannot be undone.`,\n      confirmText: 'Delete',\n      cancelText: 'Cancel',\n      variant: 'danger',\n      confirmButtonVariant: 'danger'\n    });\n    \n    if (confirmed) {\n      bulkDeleteTasks(Array.from(selectedTasks));\n      setSelectedTasks(new Set());\n    }\n  };\n  \n  const handleBulkComplete = async () => {\n    if (selectedTasks.size === 0) return;\n    \n    const confirmed = await confirm({\n      title: 'Complete Tasks',\n      message: `Mark ${selectedTasks.size} task${selectedTasks.size > 1 ? 's' : ''} as completed?`,\n      confirmText: 'Complete',\n      cancelText: 'Cancel',\n      variant: 'info',\n      confirmButtonVariant: 'primary'\n    });\n    \n    if (confirmed) {\n      bulkCompleteTasks(Array.from(selectedTasks));\n      setSelectedTasks(new Set());\n    }\n  };\n  \n  const handleBulkMove = () => {\n    setShowBulkMoveModal(true);\n  };\n  \n  const executeBulkMove = () => {\n    if (selectedTasks.size > 0) {\n      bulkMoveTasks(Array.from(selectedTasks), selectedProjectForMove);\n      setSelectedTasks(new Set());\n      setShowBulkMoveModal(false);\n      setSelectedProjectForMove(null);\n    }\n  };\n  \n  const handleBulkArchive = async () => {\n    if (selectedTasks.size === 0) return;\n    \n    const confirmed = await confirm({\n      title: 'Archive Tasks',\n      message: `Archive ${selectedTasks.size} task${selectedTasks.size > 1 ? 's' : ''}?\\n\\nArchived tasks will be hidden from your main views but can be accessed later.`,\n      confirmText: 'Archive',\n      cancelText: 'Cancel',\n      variant: 'info',\n      confirmButtonVariant: 'primary'\n    });\n    \n    if (confirmed) {\n      bulkArchiveTasks(Array.from(selectedTasks));\n      setSelectedTasks(new Set());\n    }\n  };\n  \n  const handleBulkConvertToSubtasks = () => {\n    setShowConvertToSubtasksModal(true);\n  };\n  \n  const executeBulkConvertToSubtasks = () => {\n    if (selectedTasks.size > 0 && selectedParentTaskId) {\n      bulkConvertToSubtasks(Array.from(selectedTasks), selectedParentTaskId);\n      setSelectedTasks(new Set());\n      setShowConvertToSubtasksModal(false);\n      setSelectedParentTaskId(null);\n    }\n  };\n  \n  const handleBulkCategoryAssign = () => {\n    setShowBulkCategoryModal(true);\n  };\n  \n  const executeBulkCategoryAssign = () => {\n    if (selectedTasks.size > 0 && selectedCategoryIdsForBulk.length > 0) {\n      bulkAssignCategories(Array.from(selectedTasks), selectedCategoryIdsForBulk, categoryAssignMode);\n      setSelectedTasks(new Set());\n      setShowBulkCategoryModal(false);\n      setSelectedCategoryIdsForBulk([]);\n      setCategoryAssignMode('add');\n    }\n  };\n  \n  // Get tomorrow's date in YYYY-MM-DD format\n  const getTomorrowDate = (): string => {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    return formatDate(tomorrow);\n  };\n  \n  // Get tasks due tomorrow\n  const getTasksDueTomorrow = (tasks: Task[]): Task[] => {\n    const tomorrowDate = getTomorrowDate();\n    return tasks.filter(task => \n      task.dueDate === tomorrowDate && \n      !task.completed && \n      !task.archived\n    );\n  };\n  \n  // Sort function\n  const sortTasks = (tasks: Task[]): Task[] => {\n    // If using smart sort, delegate to the smart sorting utility\n    if (showSmartSort) {\n      return smartSortTasks(tasks, smartSortMode, currentEnergy);\n    }\n    \n    // Otherwise use traditional sorting\n    const sorted = [...tasks].sort((a, b) => {\n      let comparison = 0;\n      \n      switch (sortBy) {\n        case 'dueDate':\n          // Tasks without due dates go to the end\n          if (!a.dueDate && !b.dueDate) comparison = 0;\n          else if (!a.dueDate) comparison = 1;\n          else if (!b.dueDate) comparison = -1;\n          else comparison = a.dueDate.localeCompare(b.dueDate);\n          break;\n          \n        case 'priority':\n          const priorityOrder = { high: 3, medium: 2, low: 1 };\n          comparison = (priorityOrder[b.priority || 'medium'] || 2) - (priorityOrder[a.priority || 'medium'] || 2);\n          break;\n          \n        case 'createdAt':\n          comparison = new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n          break;\n          \n        case 'title':\n          comparison = a.title.localeCompare(b.title);\n          break;\n          \n        case 'estimatedMinutes':\n          const aMinutes = a.estimatedMinutes || 0;\n          const bMinutes = b.estimatedMinutes || 0;\n          comparison = bMinutes - aMinutes;\n          break;\n          \n        case 'project':\n          const aProject = projects.find(p => p.id === a.projectId)?.name || '';\n          const bProject = projects.find(p => p.id === b.projectId)?.name || '';\n          comparison = aProject.localeCompare(bProject);\n          break;\n      }\n      \n      // Apply sort direction\n      return sortDirection === 'asc' ? comparison : -comparison;\n    });\n    \n    return sorted;\n  };\n  \n  // Filter tasks based on global filters (project, category)\n  const applyBaseFilter = (task: Task): boolean => {\n    if (filterProjectId && task.projectId !== filterProjectId) {\n      return false;\n    }\n    \n    if (filterCategoryId && !(task.categoryIds?.includes(filterCategoryId) || false)) {\n      return false;\n    }\n    \n    return true;\n  };\n  \n  // Get tasks for each section (unsorted)\n  const overdueTasksUnsorted = getOverdueTasks(tasks)\n    .filter(task => !task.archived)\n    .filter(applyBaseFilter);\n    \n  const todayTasksUnsorted = getTasksDueToday(tasks)\n    .filter(task => !task.archived)\n    .filter(applyBaseFilter);\n    \n  const tomorrowTasksUnsorted = getTasksDueTomorrow(tasks)\n    .filter(applyBaseFilter);\n    \n  const thisWeekTasksUnsorted = getTasksDueThisWeek(tasks)\n    .filter(task => \n      task.dueDate !== formatDate(new Date()) && \n      task.dueDate !== getTomorrowDate()\n    )\n    .filter(task => !task.archived)\n    .filter(applyBaseFilter);\n    \n  const otherTasksUnsorted = tasks.filter(task => \n    (showCompleted || !task.completed) &&\n    (showArchived || !task.archived) &&\n    (!task.dueDate || \n      (!overdueTasksUnsorted.some(t => t.id === task.id) && \n       !todayTasksUnsorted.some(t => t.id === task.id) && \n       !tomorrowTasksUnsorted.some(t => t.id === task.id) && \n       !thisWeekTasksUnsorted.some(t => t.id === task.id))\n    )\n  ).filter(applyBaseFilter);\n  \n  // Apply sorting to each section\n  const overdueTasks = sortTasks(overdueTasksUnsorted);\n  const todayTasks = sortTasks(todayTasksUnsorted);\n  const tomorrowTasks = sortTasks(tomorrowTasksUnsorted);\n  const thisWeekTasks = sortTasks(thisWeekTasksUnsorted);\n  // const otherTasks = sortTasks(otherTasksUnsorted);\n  \n  // Get currently active task list based on the selected tab\n  const getActiveTaskList = (): Task[] => {\n    switch (activeTab) {\n      case 'today':\n        return todayTasks;\n      case 'tomorrow':\n        return tomorrowTasks;\n      case 'week':\n        return thisWeekTasks;\n      case 'overdue':\n        return overdueTasks;\n      case 'all':\n        // For 'all' view, we need to sort the entire combined list\n        const allTasks = [...overdueTasksUnsorted, ...todayTasksUnsorted, ...tomorrowTasksUnsorted, ...thisWeekTasksUnsorted, ...otherTasksUnsorted];\n        return sortTasks(allTasks);\n      default:\n        // Default to all tasks view\n        const allTasksDefault = [...overdueTasksUnsorted, ...todayTasksUnsorted, ...tomorrowTasksUnsorted, ...thisWeekTasksUnsorted, ...otherTasksUnsorted];\n        return sortTasks(allTasksDefault);\n    }\n  };\n  \n  const activeTaskList = getActiveTaskList();\n  const parentTasks = activeTaskList.filter(task => !task.parentTaskId);\n  \n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row justify-between md:items-center bg-white dark:bg-gray-800 rounded-lg shadow-sm p-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">Tasks</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            {activeTaskList.length} task{activeTaskList.length !== 1 ? 's' : ''}\n            {(filterProjectId || filterCategoryId) && ' (filtered)'}\n            {selectedTasks.size > 0 && ` • ${selectedTasks.size} selected`}\n            {sortBy !== 'dueDate' && ` • Sorted by ${sortBy === 'createdAt' ? 'created date' : sortBy === 'estimatedMinutes' ? 'time estimate' : sortBy}`}\n          </p>\n        </div>\n        <div className=\"mt-4 md:mt-0 flex flex-wrap gap-2\">\n          <Button\n            variant={showBulkActions ? \"secondary\" : \"outline\"}\n            onClick={() => setShowBulkActions(!showBulkActions)}\n          >\n            {showBulkActions ? 'Hide Bulk Actions' : 'Bulk Actions'}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            icon={<Archive size={16} />}\n            onClick={handleArchiveConfirmOpen}\n          >\n            Archive Completed\n          </Button>\n          <Button\n            variant={showSmartSort ? \"primary\" : \"secondary\"}\n            icon={<Brain size={16} />}\n            onClick={() => setShowSmartSort(!showSmartSort)}\n          >\n            Smart Sort\n          </Button>\n          <div className=\"relative\" ref={sortMenuRef}>\n            <Button\n              variant=\"secondary\"\n              icon={<ArrowUpDown size={16} />}\n              onClick={() => setShowSortMenu(!showSortMenu)}\n            >\n              {showSmartSort ? 'Legacy Sort' : 'Sort'}\n            </Button>\n            {showSortMenu && (\n              <div className=\"absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black dark:ring-gray-600 ring-opacity-5 z-10\">\n                <div className=\"py-1\" role=\"menu\">\n                  <button\n                    className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between ${\n                      sortBy === 'dueDate' ? 'bg-indigo-50 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300' : 'text-gray-700 dark:text-gray-300'\n                    }`}\n                    onClick={() => {\n                      if (sortBy === 'dueDate') {\n                        setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                      } else {\n                        setSortBy('dueDate');\n                        setSortDirection('asc');\n                      }\n                    }}\n                  >\n                    <span className=\"flex items-center\">\n                      <Calendar size={16} className=\"mr-2\" />\n                      Due Date\n                    </span>\n                    {sortBy === 'dueDate' && (\n                      <span className=\"text-xs\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                    )}\n                  </button>\n                  \n                  <button\n                    className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between ${\n                      sortBy === 'priority' ? 'bg-indigo-50 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300' : 'text-gray-700 dark:text-gray-300'\n                    }`}\n                    onClick={() => {\n                      if (sortBy === 'priority') {\n                        setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                      } else {\n                        setSortBy('priority');\n                        setSortDirection('desc');\n                      }\n                    }}\n                  >\n                    <span className=\"flex items-center\">\n                      <Star size={16} className=\"mr-2\" />\n                      Priority\n                    </span>\n                    {sortBy === 'priority' && (\n                      <span className=\"text-xs\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                    )}\n                  </button>\n                  \n                  <button\n                    className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between ${\n                      sortBy === 'createdAt' ? 'bg-indigo-50 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300' : 'text-gray-700 dark:text-gray-300'\n                    }`}\n                    onClick={() => {\n                      if (sortBy === 'createdAt') {\n                        setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                      } else {\n                        setSortBy('createdAt');\n                        setSortDirection('desc');\n                      }\n                    }}\n                  >\n                    <span className=\"flex items-center\">\n                      <Plus size={16} className=\"mr-2\" />\n                      Created Date\n                    </span>\n                    {sortBy === 'createdAt' && (\n                      <span className=\"text-xs\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                    )}\n                  </button>\n                  \n                  <button\n                    className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between ${\n                      sortBy === 'title' ? 'bg-indigo-50 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300' : 'text-gray-700 dark:text-gray-300'\n                    }`}\n                    onClick={() => {\n                      if (sortBy === 'title') {\n                        setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                      } else {\n                        setSortBy('title');\n                        setSortDirection('asc');\n                      }\n                    }}\n                  >\n                    <span className=\"flex items-center\">\n                      <Hash size={16} className=\"mr-2\" />\n                      Title\n                    </span>\n                    {sortBy === 'title' && (\n                      <span className=\"text-xs\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                    )}\n                  </button>\n                  \n                  <button\n                    className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between ${\n                      sortBy === 'estimatedMinutes' ? 'bg-indigo-50 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300' : 'text-gray-700 dark:text-gray-300'\n                    }`}\n                    onClick={() => {\n                      if (sortBy === 'estimatedMinutes') {\n                        setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                      } else {\n                        setSortBy('estimatedMinutes');\n                        setSortDirection('desc');\n                      }\n                    }}\n                  >\n                    <span className=\"flex items-center\">\n                      <Clock size={16} className=\"mr-2\" />\n                      Time Estimate\n                    </span>\n                    {sortBy === 'estimatedMinutes' && (\n                      <span className=\"text-xs\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                    )}\n                  </button>\n                  \n                  <button\n                    className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center justify-between ${\n                      sortBy === 'project' ? 'bg-indigo-50 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300' : 'text-gray-700 dark:text-gray-300'\n                    }`}\n                    onClick={() => {\n                      if (sortBy === 'project') {\n                        setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n                      } else {\n                        setSortBy('project');\n                        setSortDirection('asc');\n                      }\n                    }}\n                  >\n                    <span className=\"flex items-center\">\n                      <FolderOpen size={16} className=\"mr-2\" />\n                      Project\n                    </span>\n                    {sortBy === 'project' && (\n                      <span className=\"text-xs\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                    )}\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n          <Button\n            variant=\"secondary\"\n            icon={<Filter size={16} />}\n            onClick={toggleFilter}\n          >\n            Filter\n          </Button>\n          <Button\n            variant=\"primary\"\n            icon={<Plus size={16} />}\n            onClick={() => handleOpenModal()}\n          >\n            New Task\n          </Button>\n        </div>\n      </div>\n      \n      {/* Bulk Actions Bar */}\n      {showBulkActions && (\n        <Card className=\"bg-indigo-50\">\n          <div className=\"flex flex-wrap items-center justify-between gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={selectAllVisibleTasks}\n              >\n                Select All\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={deselectAllTasks}\n              >\n                Deselect All\n              </Button>\n              <span className=\"text-sm text-gray-600\">\n                {selectedTasks.size} selected\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"primary\"\n                icon={<CheckCircle2 size={14} />}\n                onClick={handleBulkComplete}\n                disabled={selectedTasks.size === 0}\n              >\n                Complete\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                icon={<Folder size={14} />}\n                onClick={handleBulkMove}\n                disabled={selectedTasks.size === 0}\n              >\n                Move\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                icon={<Tag size={14} />}\n                onClick={handleBulkCategoryAssign}\n                disabled={selectedTasks.size === 0}\n              >\n                Categories\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                icon={<Layers size={14} />}\n                onClick={handleBulkConvertToSubtasks}\n                disabled={selectedTasks.size === 0}\n              >\n                Make Subtasks\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                icon={<FileArchive size={14} />}\n                onClick={handleBulkArchive}\n                disabled={selectedTasks.size === 0}\n              >\n                Archive\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"danger\"\n                icon={<Trash2 size={14} />}\n                onClick={handleBulkDelete}\n                disabled={selectedTasks.size === 0}\n              >\n                Delete\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n      \n      {/* Quick Task Input */}\n      <div className=\"mb-6\">\n        <QuickCapture \n          placeholder=\"Add a task quickly... (try !today, !tomorrow, !high)\"\n          defaultProjectId={filterProjectId}\n          onTaskAdded={() => {\n            if (activeTab === 'today') {\n              // Stay on today tab\n            } else if (activeTab === 'all') {\n              // Stay on all tab\n            } else {\n              setActiveTab('all');\n            }\n          }}\n        />\n      </div>\n      \n      {/* Tab navigation */}\n      <div className=\"overflow-x-auto pb-1 md:pb-0 hide-scrollbar\">\n        <div className=\"flex min-w-max border-b border-gray-200\">\n          <button\n            className={`flex-shrink-0 px-4 py-2 font-medium text-sm rounded-t-md border-b-2 transition-colors ${\n              activeTab === 'today' \n                ? 'border-indigo-500 text-indigo-600 bg-indigo-50' \n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n            onClick={() => setActiveTab('today')}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <Calendar size={16} />\n              <span className=\"whitespace-nowrap\">Today{todayTasks.length > 0 && ` (${todayTasks.length})`}</span>\n            </div>\n          </button>\n          \n          <button\n            className={`flex-shrink-0 px-4 py-2 font-medium text-sm rounded-t-md border-b-2 transition-colors ${\n              activeTab === 'tomorrow' \n                ? 'border-indigo-500 text-indigo-600 bg-indigo-50' \n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n            onClick={() => setActiveTab('tomorrow')}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <CalendarDays size={16} />\n              <span className=\"whitespace-nowrap\">Tomorrow{tomorrowTasks.length > 0 && ` (${tomorrowTasks.length})`}</span>\n            </div>\n          </button>\n          \n          <button\n            className={`flex-shrink-0 px-4 py-2 font-medium text-sm rounded-t-md border-b-2 transition-colors ${\n              activeTab === 'week' \n                ? 'border-indigo-500 text-indigo-600 bg-indigo-50' \n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n            onClick={() => setActiveTab('week')}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <CalendarDays size={16} />\n              <span className=\"whitespace-nowrap\">This Week{thisWeekTasks.length > 0 && ` (${thisWeekTasks.length})`}</span>\n            </div>\n          </button>\n          \n          <button\n            className={`flex-shrink-0 px-4 py-2 font-medium text-sm rounded-t-md border-b-2 transition-colors ${\n              activeTab === 'overdue' \n                ? 'border-red-500 text-red-600 bg-red-50' \n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n            onClick={() => setActiveTab('overdue')}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <AlertTriangle size={16} className={overdueTasks.length > 0 ? 'text-red-500' : ''} />\n              <span className=\"whitespace-nowrap\">Overdue{overdueTasks.length > 0 && ` (${overdueTasks.length})`}</span>\n            </div>\n          </button>\n          \n          <button\n            className={`flex-shrink-0 px-4 py-2 font-medium text-sm rounded-t-md border-b-2 transition-colors ${\n              activeTab === 'all' \n                ? 'border-indigo-500 text-indigo-600 bg-indigo-50' \n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n            onClick={() => setActiveTab('all')}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <Layers size={16} />\n              <span className=\"whitespace-nowrap\">All Tasks</span>\n            </div>\n          </button>\n          \n          <button\n            className={`flex-shrink-0 px-4 py-2 font-medium text-sm rounded-t-md border-b-2 transition-colors ${\n              activeTab === 'deleted' \n                ? 'border-gray-500 text-gray-600 bg-gray-50' \n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n            }`}\n            onClick={() => setActiveTab('deleted')}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <Trash2 size={16} />\n              <span className=\"whitespace-nowrap\">Deleted</span>\n            </div>\n          </button>\n        </div>\n      </div>\n      \n      {/* Add CSS for hiding scrollbar but allowing scroll */}\n      <style>{`\n        .hide-scrollbar {\n          -ms-overflow-style: none;  /* IE and Edge */\n          scrollbar-width: none;  /* Firefox */\n        }\n        .hide-scrollbar::-webkit-scrollbar {\n          display: none;  /* Chrome, Safari, Opera */\n        }\n      `}</style>\n      \n      {/* Undo notification */}\n      {showUndoNotification && (\n        <div className=\"fixed bottom-4 right-4 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg flex items-center space-x-3 z-50\">\n          <span>Task deleted</span>\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            icon={<Undo2 size={14} />}\n            onClick={handleUndo}\n          >\n            Undo\n          </Button>\n        </div>\n      )}\n      \n      {/* Filter panel - same as before */}\n      {isFilterOpen && (\n        <Card className=\"bg-gray-50\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Filters</h3>\n              <button\n                className=\"text-gray-400 hover:text-gray-500\"\n                onClick={toggleFilter}\n              >\n                <X size={20} />\n              </button>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Task Status\n                </label>\n                <div className=\"flex flex-col space-y-2\">\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"showCompleted\"\n                      checked={showCompleted}\n                      onChange={() => setShowCompleted(!showCompleted)}\n                      className=\"h-4 w-4 text-indigo-600 border-gray-300 rounded\"\n                    />\n                    <label htmlFor=\"showCompleted\" className=\"ml-2 text-sm text-gray-700\">\n                      Show completed tasks\n                    </label>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"showArchived\"\n                      checked={showArchived}\n                      onChange={() => setShowArchived(!showArchived)}\n                      className=\"h-4 w-4 text-indigo-600 border-gray-300 rounded\"\n                    />\n                    <label htmlFor=\"showArchived\" className=\"ml-2 text-sm text-gray-700\">\n                      Show archived tasks\n                    </label>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <label htmlFor=\"projectFilter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Project\n                </label>\n                <select\n                  id=\"projectFilter\"\n                  value={filterProjectId || ''}\n                  onChange={(e) => setFilterProjectId(e.target.value || null)}\n                  className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                >\n                  <option value=\"\">All Projects</option>\n                  {projects.map(project => (\n                    <option key={project.id} value={project.id}>\n                      {project.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              <div>\n                <label htmlFor=\"categoryFilter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Category\n                </label>\n                <select\n                  id=\"categoryFilter\"\n                  value={filterCategoryId || ''}\n                  onChange={(e) => setFilterCategoryId(e.target.value || null)}\n                  className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                >\n                  <option value=\"\">All Categories</option>\n                  {categories.map(category => (\n                    <option key={category.id} value={category.id}>\n                      {category.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end\">\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={clearFilters}\n              >\n                Clear Filters\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n      \n      {/* Smart Sort Controls */}\n      {showSmartSort && (\n        <Card className=\"bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-900/20 dark:to-indigo-900/20 border-purple-200 dark:border-purple-800\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 flex items-center\">\n                <Brain size={20} className=\"mr-2 text-purple-600 dark:text-purple-400\" />\n                Smart Task Prioritization\n              </h3>\n              <button\n                className=\"text-gray-400 hover:text-gray-500\"\n                onClick={() => setShowSmartSort(false)}\n              >\n                <X size={20} />\n              </button>\n            </div>\n            \n            {/* Current Energy Level */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Battery size={16} className=\"inline mr-1\" />\n                Your Current Energy Level\n              </label>\n              <div className=\"flex gap-2\">\n                {(['low', 'medium', 'high'] as const).map(level => (\n                  <button\n                    key={level}\n                    onClick={() => setCurrentEnergy(level)}\n                    className={`px-4 py-2 rounded-lg font-medium transition-all ${\n                      currentEnergy === level\n                        ? 'bg-purple-600 text-white shadow-lg scale-105'\n                        : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-purple-50 dark:hover:bg-purple-900/20'\n                    }`}\n                  >\n                    {level === 'low' && '🔋 Low'}\n                    {level === 'medium' && '🔋🔋 Medium'}\n                    {level === 'high' && '🔋🔋🔋 High'}\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            {/* Sorting Mode */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                <Zap size={16} className=\"inline mr-1\" />\n                Prioritization Strategy\n              </label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                {[\n                  { mode: 'smart' as const, label: '🧠 Smart Sort', desc: 'AI-optimized task ordering' },\n                  { mode: 'energymatch' as const, label: '🔋 Energy Match', desc: 'Only matching tasks' },\n                  { mode: 'quickwins' as const, label: '⚡ Quick Wins', desc: 'Build momentum' },\n                  { mode: 'eatthefrog' as const, label: '🐸 Eat the Frog', desc: 'Hard tasks first' },\n                  { mode: 'deadline' as const, label: '⏰ Deadline Focus', desc: 'Due date priority' },\n                  { mode: 'priority' as const, label: '⭐ Priority', desc: 'Traditional priority' },\n                ].map(({ mode, label, desc }) => (\n                  <button\n                    key={mode}\n                    onClick={() => setSmartSortMode(mode)}\n                    className={`p-3 rounded-lg text-left transition-all ${\n                      smartSortMode === mode\n                        ? 'bg-purple-600 text-white shadow-lg'\n                        : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-purple-50 dark:hover:bg-purple-900/20 border border-gray-200 dark:border-gray-700'\n                    }`}\n                  >\n                    <div className=\"font-medium text-sm\">{label}</div>\n                    <div className={`text-xs mt-1 ${smartSortMode === mode ? 'text-purple-100' : 'text-gray-500 dark:text-gray-400'}`}>\n                      {desc}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            {/* Filter Chips */}\n            {(() => {\n              const filteredCounts = getFilteredCounts(tasks, currentEnergy);\n              const activeTasks = tasks.filter(t => !t.completed && !t.archived);\n              return (\n                <div className=\"flex flex-wrap gap-2\">\n                  <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 w-full\">\n                    Quick Filters ({activeTasks.length} active tasks):\n                  </div>\n                  <button\n                    onClick={() => setSmartSortMode('quickwins')}\n                    className={`px-3 py-1 rounded-full text-sm transition-all ${\n                      smartSortMode === 'quickwins'\n                        ? 'bg-green-500 text-white'\n                        : 'bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300 hover:bg-green-200 dark:hover:bg-green-900/30'\n                    }`}\n                  >\n                    ⚡ Quick Wins ({filteredCounts.quickWins})\n                  </button>\n                  \n                  <button\n                    onClick={() => setSmartSortMode('deadline')}\n                    className={`px-3 py-1 rounded-full text-sm transition-all ${\n                      smartSortMode === 'deadline'\n                        ? 'bg-red-500 text-white'\n                        : 'bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-300 hover:bg-red-200 dark:hover:bg-red-900/30'\n                    }`}\n                  >\n                    🔥 Due Today ({filteredCounts.dueToday})\n                  </button>\n                  \n                  <button\n                    onClick={() => setSmartSortMode('eatthefrog')}\n                    className={`px-3 py-1 rounded-full text-sm transition-all ${\n                      smartSortMode === 'eatthefrog'\n                        ? 'bg-orange-500 text-white'\n                        : 'bg-orange-100 dark:bg-orange-900/20 text-orange-700 dark:text-orange-300 hover:bg-orange-200 dark:hover:bg-orange-900/30'\n                    }`}\n                  >\n                    💪 High Energy ({filteredCounts.highEnergy})\n                  </button>\n                  \n                  {filteredCounts.energyMatch > 0 && (\n                    <button\n                      onClick={() => setSmartSortMode('energymatch')}\n                      className={`px-3 py-1 rounded-full text-sm transition-all ${\n                        smartSortMode === 'energymatch'\n                          ? 'bg-blue-500 text-white'\n                          : 'bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 hover:bg-blue-200 dark:hover:bg-blue-900/30'\n                      }`}\n                    >\n                      🔋 Energy Match ({filteredCounts.energyMatch})\n                    </button>\n                  )}\n                </div>\n              );\n            })()}\n            \n            {/* Smart Sort Info */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg p-3 text-sm text-gray-600 dark:text-gray-400\">\n              <p className=\"font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                Current Strategy: {getSortModeInfo(smartSortMode).name}\n              </p>\n              <p>{getSortModeInfo(smartSortMode).description}</p>\n            </div>\n          </div>\n        </Card>\n      )}\n      \n      {/* Task list */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-4\">\n        <div className=\"space-y-4\">\n          {parentTasks.length > 0 ? (\n            <div>\n              {activeTab === 'all' ? (\n                <div className=\"space-y-2\">\n                  {parentTasks.map(task => (\n                    <BulkTaskCard\n                      key={task.id}\n                      task={task}\n                      isSelected={selectedTasks.has(task.id)}\n                      onSelectChange={(selected) => {\n                        if (selected) {\n                          toggleTaskSelection(task.id);\n                        } else {\n                          const newSelection = new Set(selectedTasks);\n                          newSelection.delete(task.id);\n                          setSelectedTasks(newSelection);\n                        }\n                      }}\n                      onEdit={handleOpenModal}\n                      onDelete={handleDeleteTask}\n                      onBreakdown={handleBreakdown}\n                      onConvertToProject={handleConvertToProject}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-2\">\n                  {parentTasks.map(task => (\n                    <BulkTaskCard\n                      key={task.id}\n                      task={task}\n                      isSelected={selectedTasks.has(task.id)}\n                      onSelectChange={(selected) => {\n                        if (selected) {\n                          toggleTaskSelection(task.id);\n                        } else {\n                          const newSelection = new Set(selectedTasks);\n                          newSelection.delete(task.id);\n                          setSelectedTasks(newSelection);\n                        }\n                      }}\n                      onEdit={handleOpenModal}\n                      onDelete={handleDeleteTask}\n                      onBreakdown={handleBreakdown}\n                      onConvertToProject={handleConvertToProject}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          ) : (\n            <Empty\n              title=\"No tasks found\"\n              description={\n                filterProjectId || filterCategoryId\n                  ? \"Try adjusting your filters or create a new task\"\n                  : activeTab === 'today'\n                    ? \"No tasks due today. Add a task or check another tab.\"\n                    : activeTab === 'tomorrow'\n                      ? \"No tasks due tomorrow. Add a task or check another tab.\"\n                      : activeTab === 'week'\n                        ? \"No tasks due this week. Add a task or check another tab.\"\n                        : activeTab === 'overdue'\n                          ? \"No overdue tasks. You're all caught up!\"\n                          : \"Get started by creating your first task\"\n              }\n              action={\n                <Button\n                  variant=\"primary\"\n                  size=\"sm\"\n                  icon={<Plus size={16} />}\n                  onClick={() => handleOpenModal()}\n                >\n                  New Task\n                </Button>\n              }\n            />\n          )}\n        </div>\n      </div>\n      \n      {/* Task Modal */}\n      <Modal\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        title={editingTask ? 'Edit Task' : 'Create New Task'}\n        size=\"3xl\"\n      >\n        <TaskFormWithDependencies\n          task={editingTask || undefined}\n          onClose={handleCloseModal}\n          isEdit={!!editingTask}\n        />\n      </Modal>\n      \n      \n      {/* Bulk Move Modal */}\n      <Modal\n        isOpen={showBulkMoveModal}\n        onClose={() => setShowBulkMoveModal(false)}\n        title=\"Move Selected Tasks\"\n        size=\"sm\"\n      >\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-600\">\n            Move {selectedTasks.size} selected task{selectedTasks.size !== 1 ? 's' : ''} to:\n          </p>\n          <select\n            value={selectedProjectForMove || ''}\n            onChange={(e) => setSelectedProjectForMove(e.target.value || null)}\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          >\n            <option value=\"\">No Project</option>\n            {projects.map(project => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </select>\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => setShowBulkMoveModal(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              icon={<Folder size={16} />}\n              onClick={executeBulkMove}\n            >\n              Move Tasks\n            </Button>\n          </div>\n        </div>\n      </Modal>\n      \n      {/* AI Breakdown Modal */}\n      {breakdownTask && (\n        <AITaskBreakdown\n          task={breakdownTask}\n          onAccept={handleBreakdownAccept}\n          onClose={handleBreakdownClose}\n        />\n      )}\n      \n      {/* Convert to Project Modal */}\n      {convertToProjectTask && (\n        <ConvertToProject\n          task={convertToProjectTask}\n          onConfirm={handleConvertToProjectConfirm}\n          onCancel={handleConvertToProjectCancel}\n          subtasks={tasks.filter(t => t.parentTaskId === convertToProjectTask.id)}\n        />\n      )}\n      \n      {/* Convert to Subtasks Modal */}\n      <Modal\n        isOpen={showConvertToSubtasksModal}\n        onClose={() => {\n          setShowConvertToSubtasksModal(false);\n          setSelectedParentTaskId(null);\n        }}\n        title=\"Convert to Subtasks\"\n        size=\"md\"\n      >\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-600\">\n            Convert {selectedTasks.size} selected task{selectedTasks.size !== 1 ? 's' : ''} into subtasks of:\n          </p>\n          \n          <div className=\"max-h-96 overflow-y-auto space-y-2 border rounded-md p-3\">\n            {tasks\n              .filter(task => \n                !task.completed && \n                !task.archived && \n                !selectedTasks.has(task.id) // Can't make a task a subtask of itself\n              )\n              .map(task => (\n                <label\n                  key={task.id}\n                  className={`flex items-start p-3 rounded-lg cursor-pointer transition-colors ${\n                    selectedParentTaskId === task.id \n                      ? 'bg-indigo-50 border-2 border-indigo-500' \n                      : 'bg-gray-50 hover:bg-gray-100 border-2 border-transparent'\n                  }`}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"parentTask\"\n                    value={task.id}\n                    checked={selectedParentTaskId === task.id}\n                    onChange={() => setSelectedParentTaskId(task.id)}\n                    className=\"mt-1 h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300\"\n                  />\n                  <div className=\"ml-3 flex-1\">\n                    <div className=\"font-medium text-gray-900\">{task.title}</div>\n                    {task.description && (\n                      <div className=\"text-sm text-gray-500 mt-1\">{task.description}</div>\n                    )}\n                    {task.projectId && (\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        Project: {projects.find(p => p.id === task.projectId)?.name}\n                      </div>\n                    )}\n                  </div>\n                </label>\n              ))\n            }\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                setShowConvertToSubtasksModal(false);\n                setSelectedParentTaskId(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              icon={<Layers size={16} />}\n              onClick={executeBulkConvertToSubtasks}\n              disabled={!selectedParentTaskId}\n            >\n              Convert to Subtasks\n            </Button>\n          </div>\n        </div>\n      </Modal>\n      \n      {/* Bulk Category Assignment Modal */}\n      <Modal\n        isOpen={showBulkCategoryModal}\n        onClose={() => {\n          setShowBulkCategoryModal(false);\n          setSelectedCategoryIdsForBulk([]);\n          setCategoryAssignMode('add');\n        }}\n        title=\"Assign Categories\"\n        size=\"md\"\n      >\n        <div className=\"space-y-4\">\n          <p className=\"text-gray-600\">\n            Assign categories to {selectedTasks.size} selected task{selectedTasks.size !== 1 ? 's' : ''}:\n          </p>\n          \n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Assignment Mode\n            </label>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  name=\"assignMode\"\n                  value=\"add\"\n                  checked={categoryAssignMode === 'add'}\n                  onChange={() => setCategoryAssignMode('add')}\n                  className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300\"\n                />\n                <span className=\"ml-2 text-sm text-gray-700\">\n                  Add to existing categories\n                </span>\n              </label>\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  name=\"assignMode\"\n                  value=\"replace\"\n                  checked={categoryAssignMode === 'replace'}\n                  onChange={() => setCategoryAssignMode('replace')}\n                  className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300\"\n                />\n                <span className=\"ml-2 text-sm text-gray-700\">\n                  Replace all existing categories\n                </span>\n              </label>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Select Categories\n            </label>\n            <div className=\"max-h-64 overflow-y-auto space-y-2 border rounded-md p-3\">\n              {categories.map(category => (\n                <label\n                  key={category.id}\n                  className=\"flex items-center p-2 rounded hover:bg-gray-50 cursor-pointer\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    value={category.id}\n                    checked={selectedCategoryIdsForBulk.includes(category.id)}\n                    onChange={(e) => {\n                      if (e.target.checked) {\n                        setSelectedCategoryIdsForBulk([...selectedCategoryIdsForBulk, category.id]);\n                      } else {\n                        setSelectedCategoryIdsForBulk(\n                          selectedCategoryIdsForBulk.filter(id => id !== category.id)\n                        );\n                      }\n                    }}\n                    className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\n                  />\n                  <div className=\"ml-3 flex items-center\">\n                    <div\n                      className=\"h-4 w-4 rounded mr-2\"\n                      style={{ backgroundColor: category.color }}\n                    />\n                    <span className=\"text-sm text-gray-900\">{category.name}</span>\n                  </div>\n                </label>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                setShowBulkCategoryModal(false);\n                setSelectedCategoryIdsForBulk([]);\n                setCategoryAssignMode('add');\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              icon={<Tag size={16} />}\n              onClick={executeBulkCategoryAssign}\n              disabled={selectedCategoryIdsForBulk.length === 0}\n            >\n              Assign Categories\n            </Button>\n          </div>\n        </div>\n      </Modal>\n      \n      {/* Confirmation Dialog */}\n      <ConfirmDialogComponent />\n    </div>\n  );\n};\n\nexport default TasksPageWithBulkOps;"],"names":["CalendarDays","createLucideIcon","Undo2","BulkTaskCard","task","isSelected","onSelectChange","onEdit","onDelete","onBreakdown","onConvertToProject","updateTask","useAppContext","jsxs","jsx","e","TaskDisplay","TasksPageWithBulkOps","location","useLocation","confirm","ConfirmDialogComponent","useConfirmDialog","tasks","projects","categories","deleteTask","undoDelete","hasRecentlyDeleted","archiveCompletedTasks","bulkDeleteTasks","bulkCompleteTasks","bulkMoveTasks","bulkArchiveTasks","bulkAddTasks","bulkConvertToSubtasks","bulkAssignCategories","searchParams","tabParam","categoryIdParam","initialTab","isModalOpen","setIsModalOpen","useState","editingTask","setEditingTask","showUndoNotification","setShowUndoNotification","showArchiveConfirm","setShowArchiveConfirm","showBulkActions","setShowBulkActions","selectedTasks","setSelectedTasks","showBulkMoveModal","setShowBulkMoveModal","selectedProjectForMove","setSelectedProjectForMove","breakdownTask","setBreakdownTask","convertToProjectTask","setConvertToProjectTask","showConvertToSubtasksModal","setShowConvertToSubtasksModal","selectedParentTaskId","setSelectedParentTaskId","setDeletedTasks","showBulkCategoryModal","setShowBulkCategoryModal","selectedCategoryIdsForBulk","setSelectedCategoryIdsForBulk","categoryAssignMode","setCategoryAssignMode","showCompleted","setShowCompleted","showArchived","setShowArchived","filterProjectId","setFilterProjectId","filterCategoryId","setFilterCategoryId","isFilterOpen","setIsFilterOpen","activeTab","setActiveTab","sortBy","setSortBy","sortDirection","setSortDirection","showSortMenu","setShowSortMenu","sortMenuRef","useRef","smartSortMode","setSmartSortMode","currentEnergy","setCurrentEnergy","showSmartSort","setShowSmartSort","useEffect","timer","loadDeletedTasks","handleClickOutside","event","deleted","getDeletedTasks","a","b","handleOpenModal","handleCloseModal","handleDeleteTask","taskId","handleUndo","toggleFilter","clearFilters","handleArchiveConfirmOpen","handleBreakdown","handleBreakdownAccept","subtasks","preparedSubtasks","subtask","handleBreakdownClose","handleConvertToProject","handleConvertToProjectConfirm","projectData","options","newProject","t","phases","index","phaseName","error","handleConvertToProjectCancel","toggleTaskSelection","newSelection","selectAllVisibleTasks","visibleTaskIds","getActiveTaskList","deselectAllTasks","handleBulkDelete","handleBulkComplete","handleBulkMove","executeBulkMove","handleBulkArchive","handleBulkConvertToSubtasks","executeBulkConvertToSubtasks","handleBulkCategoryAssign","executeBulkCategoryAssign","getTomorrowDate","tomorrow","formatDate","getTasksDueTomorrow","tomorrowDate","sortTasks","smartSortTasks","comparison","priorityOrder","aMinutes","aProject","_a","p","bProject","_b","applyBaseFilter","overdueTasksUnsorted","getOverdueTasks","todayTasksUnsorted","getTasksDueToday","tomorrowTasksUnsorted","thisWeekTasksUnsorted","getTasksDueThisWeek","otherTasksUnsorted","overdueTasks","todayTasks","tomorrowTasks","thisWeekTasks","allTasks","allTasksDefault","activeTaskList","parentTasks","Button","Archive","Brain","ArrowUpDown","Calendar","Star","Plus","Hash","Clock","FolderOpen","Filter","Card","CheckCircle2","Folder","Tag","Layers","FileArchive","Trash2","QuickCapture","AlertTriangle","X","project","category","Battery","level","Zap","mode","label","desc","filteredCounts","getFilteredCounts","activeTasks","getSortModeInfo","selected","Empty","Modal","TaskFormWithDependencies","AITaskBreakdown","ConvertToProject","id"],"mappings":"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","x_google_ignoreList":[0,1]}